## (d) prediction intervals

##The data, true model, and regression line
plot(x,y, pch=20, col=grey(.5), ylim=c(-5,10))
abline(a=2.5, b=-1, lwd=1.5, col="blue")
abline(reg, lwd=1.5, col="red")

## (d)(i)
## first the actual PI, from lecture, that includes all sources of uncertainty.
pi <- predict(reg, interval="prediction", level=0.90)
lines(sort(x), pi[order(x), "lwr"], lwd=2, col="red", lty=2)
lines(sort(x), pi[order(x), "upr"], lwd=2, col="red", lty=2)
#What's with sort(x) and order(x)? Try the above two -lines- commands with "x" in place of "sort(x)" and delete "order(x)" and see what happens. The command -lines- connects dots in whatever order you feed them in.


## (d)(ii)
## count the number outside the real 90% interval
outside <- (y > pi[,"upr"]) | (y < pi[,"lwr"])
sum(outside)/n #returns 0.1 on average, but lots of variation of course

## Just for fun, lets label the plot with this
points(x,y, pch=20, col=(outside+1), ylim=c(-5,10))
mtext(side=3, line=1, paste("SLR simulation example: ",
                (sum(outside)/n)*100, "% outside the 90% interval", sep=""))
## mtext adds text to the margins ('line' is how far out, side 3 is top)
## and paste puts text and values together (seperated by 'sep').


## (d)(iii)
## The "true" prediction interval.
#recall the formula for TRUE (assume beta_0, beta_1, sigma^2 are known) prediction intervals. Think about what the intercept and slope of the line should be
abline(a=2.5 + 1.65*sqrt(sigma2_e), b=-1 , lty=2, col="blue")
abline(a=2.5 - 1.65*sqrt(sigma2_e), b=-1 , lty=2, col="blue")
#There are many other ways to get the same lines
  #alternative 1
#     line1 <- 2.5 - x + 1.65*sqrt(sigma2_e)
#     line2 <- 2.5 - x - 1.65*sqrt(sigma2_e)
#     lines(sort(x), line1[order(x)], lty=2)
#     lines(sort(x),  line2[order(x)], lty=2)
  #alternative 2
#     xx <- c(min(x), max(x))
#     lines(xx, 2.5 - xx + qnorm(.95, sd=sqrt(sigma2_e)), lty=2)
#     lines(xx, 2.5 - xx + qnorm(.05, sd=sqrt(sigma2_e)), lty=2)

## (d)(iv)
## count the number outside the TRUE 90% interval
outside.true <- (y > 2.5 - x + qnorm(.95, sd=sqrt(sigma2_e))) | (y < 2.5 - x + qnorm(.05, sd=sqrt(sigma2_e)))
sum(outside.true)/n

## compare them
c(sum(outside)/n, sum(outside.true)/n)
